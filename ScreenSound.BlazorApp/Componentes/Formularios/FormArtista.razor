@inject NavigationManager navigationManager
@inject ILogger<FormArtista> Logger
@inject ArtistasAPI artistasAPI
<MudGrid>
    <MudItem xs="12" sm="7">
         <MudPaper Class="pa-4">
            <MudForm>
                <MudTextField T="string" Label="Nome" @bind-Value="Artista.Nome" Required="true" RequiredError="Campo nome deve ser preenchido!" />
                <MudTextField T="string" Label="Biografia" @bind-Value="Artista.Bio" Required="true" RequiredError="Campo Bio deve ser preenchido!" />                
               
            </MudForm>
        </MudPaper>
        <MudPaper Class="pa-4 mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Info" @onclick="VoltarParaListagem">Voltar</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="CadastrarArtista">Gravar</MudButton>
        </MudPaper>
    </MudItem>
</MudGrid>


@code {
    [Parameter]
    public Artista? Artista { get; set; }
    private string submitMessage = string.Empty;

    private void VoltarParaListagem()
    {
        navigationManager.NavigateTo("/");
    }

    private async Task CadastrarArtista()
    {
        try
        {
            if (string.IsNullOrEmpty(Artista.Nome))
            {
                return; 
            }
            await artistasAPI.AddArtistaAsync(Artista!);
            Logger.LogInformation("Dados cadastrados com sucesso");
            Thread.Sleep(5000);
            navigationManager.NavigateTo("/");
        }
        catch (Exception)
        {
            Logger.LogInformation("Erro ao cadastrar artista!");
        }

    }



}
